// Code generated by go-bindata.
// sources:
// res/font.ini
// res/lcd.ini
// res/res.ini
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resFontIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x95\xcb\x6d\xc3\x30\x10\x44\xef\x02\xd4\x43\x2a\x08\x66\xf5\x75\x02\xa8\x12\x23\x45\x25\xf7\x20\x9f\x4b\x8a\xc8\x21\x2d\xa8\x93\xb4\x60\x59\xa4\x97\x03\x5a\x94\x56\x14\x2f\x1e\x10\x04\x9f\x67\x67\x97\xfa\xff\xfd\x3b\xe3\xa5\x2c\x64\x80\x5c\x17\x50\x16\xd5\x30\xfd\x4c\x4b\x26\x5d\x93\x6e\x48\xb7\xa4\x3b\xd2\x3d\xdd\x73\x1a\xe0\x57\x59\x94\xc5\x59\x1c\x46\x8f\x56\x4e\x8b\xc3\x80\x30\x20\x0c\x08\x03\xc6\xa8\x8e\x30\xd5\xaa\x9b\x08\xe3\xcf\x4c\x6e\x44\xfc\x15\x37\x37\x98\x31\xe2\xd6\x3d\xa6\xde\xc6\xcc\xfb\x57\x8c\xbb\x5c\xdd\x08\xec\x45\x6b\x66\x8c\x50\xd1\x92\xd9\xe8\x3f\xcd\x28\x5a\xeb\x30\x7a\x45\x45\x45\xa8\xfd\x3e\x56\xb3\x31\xb9\xe9\x0c\x9d\x06\x72\x83\xbc\x4e\xeb\xef\xdc\x20\xdd\x02\x8b\x6e\x4c\x45\x3b\x99\xe7\x06\x47\xdc\x3c\xed\xc4\x64\x66\xf3\x4c\xe3\x09\x2a\x1a\x6e\x45\xf3\x4d\xdc\x90\x6e\xe9\x4c\x47\xfb\x3d\xe9\x08\x33\x7e\x24\x5a\x2d\xef\xb5\x91\x54\x38\xe3\x7b\xd6\xe4\xec\xe7\xbc\x05\x3f\xa0\x78\x04\x81\x23\xf6\x9e\x96\x54\x3c\xe3\xf7\x52\x53\x0b\xe7\x03\xca\x07\x21\x1f\xe1\x7c\x40\xf9\x60\x31\x9f\x2f\xfb\x8c\xaa\x6e\x49\x1b\xdb\x6d\xfc\x24\x3f\x3b\xbe\x3a\x7a\x3e\x7a\xa7\x55\xc7\x9c\x1f\x73\x1f\xa4\xc6\x07\xec\x27\xd9\x07\xaf\xeb\x4f\x28\xd7\xed\x48\x1f\x3c\x6c\x8d\xa9\x62\x40\xf1\x80\xe2\x01\x95\x0d\xa9\xb2\x3d\x1e\xc7\xe8\x17\xb5\x27\x1d\x30\x97\x00\x00\x00\xff\xff\xfd\x98\x87\x43\x7a\x08\x00\x00")

func resFontIniBytes() ([]byte, error) {
	return bindataRead(
		_resFontIni,
		"res/font.ini",
	)
}

func resFontIni() (*asset, error) {
	bytes, err := resFontIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/font.ini", size: 2170, mode: os.FileMode(438), modTime: time.Unix(1469215485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resLcdIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4b\x0e\xc2\x30\x0c\x44\xf7\x91\x72\x15\x34\xce\x87\xcf\xa2\x2b\x96\x20\x71\x80\x8a\xfb\x5f\x83\xd2\x30\x45\x24\x36\x46\x74\xf5\xd4\xf6\x69\x9c\x89\x67\xdc\x63\x90\x49\x96\x07\x31\xa4\x49\x80\x27\x64\x42\x21\x54\xfe\x13\xc3\x2c\xab\x83\xf6\x21\x11\x32\xa1\x10\x2a\x61\x71\xd2\x67\xce\xe6\xbc\xde\xac\x39\xe8\x72\xb2\xe7\x60\x9c\xad\x34\x87\xb3\x89\xed\xbc\x67\xab\x43\x07\x70\x73\xf6\x9e\xa3\xf4\x76\xf0\xba\x56\x66\x3b\x5a\xce\x97\x9c\x93\xe7\x28\xe7\x39\x5b\xe7\x69\xa0\xde\xcf\x95\x5d\xe3\x77\xe7\xf6\xc7\xbe\x5d\xec\x3b\x45\xe7\x6c\xbd\xed\xb8\xa3\xe0\xee\x80\x3b\x0a\x76\x00\x3a\xc0\x23\x00\x00\xff\xff\x32\xfe\x10\x31\x08\x03\x00\x00")

func resLcdIniBytes() ([]byte, error) {
	return bindataRead(
		_resLcdIni,
		"res/lcd.ini",
	)
}

func resLcdIni() (*asset, error) {
	bytes, err := resLcdIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/lcd.ini", size: 776, mode: os.FileMode(438), modTime: time.Unix(1469041938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resResIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\xcd\xcf\x4b\x49\xac\xb4\xbd\x30\xff\xc2\x5c\x5e\xae\x90\xd2\xd4\x62\x30\x6f\xd2\x85\x45\xbc\x5c\xe1\xa9\x29\x79\x50\xfe\xc2\x0b\x0b\x80\xb2\x19\xa5\x45\x10\xee\x72\x90\xb4\x5b\x51\x26\x54\x27\x90\x13\x9c\x58\x52\x5a\x04\x55\x3a\x11\xc8\x2d\xcd\x83\x9a\xb3\x10\x10\x00\x00\xff\xff\x1f\x03\xbe\x9f\x61\x00\x00\x00")

func resResIniBytes() ([]byte, error) {
	return bindataRead(
		_resResIni,
		"res/res.ini",
	)
}

func resResIni() (*asset, error) {
	bytes, err := resResIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/res.ini", size: 97, mode: os.FileMode(438), modTime: time.Unix(1469213540, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/font.ini": resFontIni,
	"res/lcd.ini": resLcdIni,
	"res/res.ini": resResIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"font.ini": &bintree{resFontIni, map[string]*bintree{}},
		"lcd.ini": &bintree{resLcdIni, map[string]*bintree{}},
		"res.ini": &bintree{resResIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

