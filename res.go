// Code generated by go-bindata.
// sources:
// res/font.ini
// res/lcd.ini
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resFontIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x93\x51\x0e\x83\x20\x10\x44\xff\x49\xb8\xcb\x2c\x0a\xd8\x26\x9c\xc4\xf4\xfe\xd7\x28\xb2\x48\x26\x5a\x2d\xa5\xfb\xe3\x84\x90\x7d\xce\xec\xb2\xe2\x65\x8d\x24\xc8\x56\x80\x35\x2e\xe5\x4f\x2e\xc9\x7a\x22\x3d\x93\xf6\xa4\x03\xe9\x48\x7d\x96\x84\x5a\xd6\x58\xb3\x8a\x62\xda\x55\xa7\x5a\x14\x03\xc2\x80\x30\x20\x0c\x18\xd3\xf4\x01\xe3\x6e\xdd\x1c\x30\xf5\x4e\x76\x23\x52\x5b\xec\x6e\x50\x30\xa2\x75\xc6\x4c\xdf\x31\xe5\x7c\xc3\x68\xf3\xe6\x46\xd0\x1f\xda\x5c\x30\x42\xa1\x5d\xce\xa6\xfd\xe9\x40\x68\x5e\x31\xad\x85\xa3\x10\xa6\x7a\x8e\xdb\xd9\x74\xb9\x09\x1d\x9b\x06\x72\x83\xb1\x4d\x8b\x27\x37\xb8\x5e\x81\x8f\x6e\xba\x42\x5b\xba\xdf\x0d\xfe\x71\xf3\xf8\x11\x33\x38\x9b\x27\x3d\x4f\x50\x68\xd8\x43\xab\x4b\x3c\x93\xf6\x74\x27\xd0\x79\x24\xcd\x98\x77\x00\x00\x00\xff\xff\xa5\x9d\x4a\x19\x6b\x04\x00\x00")

func resFontIniBytes() ([]byte, error) {
	return bindataRead(
		_resFontIni,
		"res/font.ini",
	)
}

func resFontIni() (*asset, error) {
	bytes, err := resFontIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/font.ini", size: 1131, mode: os.FileMode(438), modTime: time.Unix(1469041371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resLcdIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4b\x0e\xc2\x30\x0c\x44\xf7\x91\x72\x15\x34\xce\x87\xcf\xa2\x2b\x96\x20\x71\x80\x8a\xfb\x5f\x83\xd2\x30\x45\x24\x36\x46\x74\xf5\xd4\xf6\x69\x9c\x89\x67\xdc\x63\x90\x49\x96\x07\x31\xa4\x49\x80\x27\x64\x42\x21\x54\xfe\x13\xc3\x2c\xab\x83\xf6\x21\x11\x32\xa1\x10\x2a\x61\x71\xd2\x67\xce\xe6\xbc\xde\xac\x39\xe8\x72\xb2\xe7\x60\x9c\xad\x34\x87\xb3\x89\xed\xbc\x67\xab\x43\x07\x70\x73\xf6\x9e\xa3\xf4\x76\xf0\xba\x56\x66\x3b\x5a\xce\x97\x9c\x93\xe7\x28\xe7\x39\x5b\xe7\x69\xa0\xde\xcf\x95\x5d\xe3\x77\xe7\xf6\xc7\xbe\x5d\xec\x3b\x45\xe7\x6c\xbd\xed\xb8\xa3\xe0\xee\x80\x3b\x0a\x76\x00\x3a\xc0\x23\x00\x00\xff\xff\x32\xfe\x10\x31\x08\x03\x00\x00")

func resLcdIniBytes() ([]byte, error) {
	return bindataRead(
		_resLcdIni,
		"res/lcd.ini",
	)
}

func resLcdIni() (*asset, error) {
	bytes, err := resLcdIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/lcd.ini", size: 776, mode: os.FileMode(438), modTime: time.Unix(1469041938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/font.ini": resFontIni,
	"res/lcd.ini": resLcdIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"font.ini": &bintree{resFontIni, map[string]*bintree{}},
		"lcd.ini": &bintree{resLcdIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

